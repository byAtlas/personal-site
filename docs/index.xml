<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> </title>
    <link>http://lfn3.net/</link>
    <language>en-us</language>
    <author>Liam Falconer</author>
    <rights>(C) 2016</rights>
    <updated>2016-09-19 21:57:44 &#43;1200 NZST</updated>

    
      
        <item>
          <title>Dependency Injection in Clojure</title>
          <link>http://lfn3.net/2016/09/19/dependency-injection-in-clojure/</link>
          <pubDate>Mon, 19 Sep 2016 21:57:44 NZST</pubDate>
          <author>Liam Falconer</author>
          <guid>http://lfn3.net/2016/09/19/dependency-injection-in-clojure/</guid>
          <description>&lt;p&gt;So this is the follow up to a follow up. I&amp;rsquo;ve been writing Clojure more or less professionally for about a year now, and I just re-read &lt;a href=&#34;http://lfn3.net/2015/02/15/fresh-thoughts-on-dependency-injection/&#34;&gt;my old thoughts on Dependency Injection&lt;/a&gt;. Once again, it having been more than 6 months, my opinions have changed.
The reasons I used dependency injection in C# don&amp;rsquo;t affect me nearly as badly in Clojure, so the amount I use it has vastly decreased, and the way and reasons I use it have changed.&lt;/p&gt;

&lt;p&gt;To recap the previous post, there were three main reasons I advocated using dependency injection (DI) in mainstream OO languages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Made it easier (or in some cases, possible) to write unit tests&lt;/li&gt;
&lt;li&gt;Enforced more separation of concerns in design&lt;/li&gt;
&lt;li&gt;Allowed development without external dependencies&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first reason is still somewhat valid in Clojure, but to a much lesser extent. The last two, not so much. There is one facet of DI that is widely used in Clojure - life-cycle management, which I will discuss at the end.&lt;/p&gt;

&lt;p&gt;So the initial reason I adopted DI was to make it easier to write tests. I didn&amp;rsquo;t realise this at the time, but this is because it introduces &lt;a href=&#34;http://www.informit.com/articles/article.aspx?p=359417&amp;amp;seqNum=2&#34;&gt;seams&lt;/a&gt; into a program. Seams are places where you can swap out behavior without affecting the rest of the program. Consciously inserting seams isn&amp;rsquo;t required nearly as much in Clojure, since &lt;a href=&#34;https://clojuredocs.org/clojure.core/with-redefs&#34;&gt;&lt;code&gt;with-redefs&lt;/code&gt;&lt;/a&gt; allows you to use every single function as a seam. Since most of your program should be functions, this makes it trivial to mock out side-effecting or non-deterministic operations. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(defn slurp-and-split [file-name]
  (-&amp;gt;&amp;gt; (slurp file-name) ;Read in file as a string
       (str/split-lines)
       (map str/trim)))

(deftest slurp-and-split-splits
  (with-redefs [slurp (constantly &amp;quot;1
                                   2&amp;quot;)]
    (is (= (list &amp;quot;1&amp;quot; &amp;quot;2&amp;quot;) (slurp-and-split &amp;quot;&amp;quot;)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see using &lt;a href=&#34;https://clojuredocs.org/clojure.core/with-redefs&#34;&gt;&lt;code&gt;with-redefs&lt;/code&gt;&lt;/a&gt; is also much, much more simple and succinct than any other mocking or stubbing library I&amp;rsquo;ve dealt with, but that&amp;rsquo;s mostly since Clojure has stuff like &lt;a href=&#34;https://clojuredocs.org/clojure.core/constantly&#34;&gt;&lt;code&gt;constantly&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I think it&amp;rsquo;s worth mentioning, I can&amp;rsquo;t really see a good way of making the above function more amenable to DI. Passing in the slurp function is possible, but then I want to wrap that up inside another function in any case. If we were using a database or something similar it would make more sense:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(defn get-user [db user-id]
  (query db &amp;quot;SELECT name, email FROM users WHERE id = ?&amp;quot; user-id))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But this function itself would become the target of mocking using &lt;code&gt;with-redefs&lt;/code&gt;, presuming query returns a map or vector. One issue with this function is that we have to manually thread db through to the call sites. I know from experience that can be painful, it&amp;rsquo;s very similar to the problems you have in OO code bases with threading values through constructors and objects that don&amp;rsquo;t need them. But by using some other Clojure libraries I mention at the end, this could be rewritten to omit the &lt;code&gt;db&lt;/code&gt; parameter, eliminating that issue.&lt;/p&gt;

&lt;p&gt;That aside, we still don&amp;rsquo;t have to inject test seams, which alleviates a lot of design burden. You don&amp;rsquo;t have to inflict &amp;lsquo;&lt;a href=&#34;http://david.heinemeierhansson.com/2014/test-induced-design-damage.html&#34;&gt;test induced design damage&lt;/a&gt;&amp;rsquo; on your code base. I used to view the hyper-abstracted, hollowed out designs that resulted from widespread use of DI as good, but now I just see this as needlessly complex. In Clojure, the simple act of extracting functions creates a lot of room for adding tests. As a functional language Clojure has great tools for putting functions together, which makes chopping up and recombining your code relatively painless, even without editor support.&lt;/p&gt;

&lt;p&gt;This means that separation of concerns is a &lt;em&gt;lot&lt;/em&gt; easier to achieve in Clojure, since it&amp;rsquo;s easier to pull apart functions. Part of this is also that functions aren&amp;rsquo;t coupled to the data they operate on by a class definition - you just have the arguments they&amp;rsquo;re passed rather than some ambient state. You still have to be conscious of functions that involve external resources but this is the case in OO languages as well. Ideally these functions can be identified by the namespace they live in, because it has something scary like the name of a database in it.&lt;/p&gt;

&lt;p&gt;Development without those kinds of external deps is also a lot easier. A well designed Clojure program is, again, mostly functions. And definitely the &amp;lsquo;business logic&amp;rsquo; should be almost entirely pure functions - you should be trying to push all the side-effects to the edges of your system. So hopefully (as long as you have some sample data to work with) it should be trivial for you to try out new code in the REPL without having to rely on the presence of databases and the like.&lt;/p&gt;

&lt;p&gt;There is one place where something of DI is still of value in Clojure, and that&amp;rsquo;s when dealing with stuff that has a life-cycle. Most good DI libs &lt;a href=&#34;http://autofac.readthedocs.io/en/latest/lifetime/index.html&#34;&gt;try&lt;/a&gt; &lt;a href=&#34;http://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html#beans-factory-scopes&#34;&gt;to&lt;/a&gt; &lt;a href=&#34;https://github.com/Netflix/governator/wiki/Lifecycle-Management&#34;&gt;deal&lt;/a&gt; with this as well. Clojure has two well known solutions to life-cycle management, &lt;a href=&#34;https://github.com/stuartsierra/component&#34;&gt;Component&lt;/a&gt; and &lt;a href=&#34;https://github.com/tolitius/mount&#34;&gt;Mount&lt;/a&gt;. They&amp;rsquo;re both much, much more simple than the OO options, probably since they aren&amp;rsquo;t &lt;a href=&#34;https://www.infoq.com/presentations/Simple-Made-Easy&#34;&gt;complected&lt;/a&gt; with other requirements. They don&amp;rsquo;t tackle of problems that OO DI libraries have to, since many of these problems are alleviated by providing first class functions (That&amp;rsquo;s an entire other post though).&lt;/p&gt;

&lt;p&gt;Since the only problem these Clojure libraries have to solve is &amp;lsquo;start these things&amp;rsquo; they boil down to &amp;lsquo;tell me about all of the things&amp;rsquo;. The two libraries take very different approaches to this, Component using an API that was more familiar to me, coming from OO, while Mount&amp;rsquo;s usage feels to me as if it embraces the design of Clojure more. Other people &lt;a href=&#34;https://www.reddit.com/r/Clojure/comments/41p73n/contrasting_component_and_mount/&#34;&gt;have&lt;/a&gt; &lt;a href=&#34;http://yogthos.net/posts/2016-01-19-ContrastingComponentAndMount.html&#34;&gt;written&lt;/a&gt; &lt;a href=&#34;https://github.com/tolitius/mount/blob/master/doc/differences-from-component.md&#34;&gt;more&lt;/a&gt; about the differences between these libraries. Personally I don&amp;rsquo;t have strong opinions about which one is better (or even if one of them is better), they both solve the problem and it&amp;rsquo;s great we have good options in this area.&lt;/p&gt;

&lt;p&gt;Looping back around to our &lt;code&gt;get-user&lt;/code&gt; function from the beginning, I&amp;rsquo;ll demonstrate how we would eliminate the &lt;code&gt;db&lt;/code&gt; parameter using mount (there&amp;rsquo;s less code involved than component, so of course it&amp;rsquo;s more impressive.)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(defstate db :start (create-db-connection connection-string))

(defn get-user [user-id]
  (query db &amp;quot;SELECT name, email FROM users WHERE id = ?&amp;quot; user-id))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you invoke &lt;code&gt;(mount.core/start)&lt;/code&gt; somewhere near your &lt;code&gt;-main&lt;/code&gt; function, this will result in the &lt;code&gt;:start&lt;/code&gt; function in all the &lt;code&gt;defstate&lt;/code&gt; mount can find being called (There&amp;rsquo;s a bit more to it than that, of course, you&amp;rsquo;ll want to see the &lt;a href=&#34;https://github.com/tolitius/mount&#34;&gt;readme&lt;/a&gt; to actually get started using it).&lt;/p&gt;

&lt;p&gt;Doing something like this does make the db related functions difficult to unit test. In my opinion, that&amp;rsquo;s perfectly ok. Integration tests should be what you&amp;rsquo;re using to validate your database interaction is working correctly, and they don&amp;rsquo;t need to be exhaustive. Unless significant portions of your applications logic live in your database, and then I&amp;rsquo;d argue you&amp;rsquo;ve got a bigger problem.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m basically out of DI related things to talk about for now, so to wrap up: Most aspects of DI aren&amp;rsquo;t amazingly useful in Clojure. It can still be used to make testing easier, but isn&amp;rsquo;t really necessary. Using lots of simple functions gives you plenty of seams to exploit. Life-cycle management is still important, and Clojure has good libraries for dealing with it that are much more painless to use than the OO solutions I&amp;rsquo;ve seen.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Leaving the M$alt Mines</title>
          <link>http://lfn3.net/2015/10/08/leaving-the-malt-mines/</link>
          <pubDate>Thu, 08 Oct 2015 22:38:13 NZDT</pubDate>
          <author>Liam Falconer</author>
          <guid>http://lfn3.net/2015/10/08/leaving-the-malt-mines/</guid>
          <description>&lt;p&gt;So a little while ago (ok, a couple of months ago now.) I quit my job at &lt;a href=&#34;https://www.ubiquity.co.nz/&#34;&gt;Ubquity&lt;/a&gt; in favour of one at &lt;a href=&#34;http://www.liveops.com/&#34;&gt;LiveOps&lt;/a&gt;. There were a bunch of reasons for that, but you&amp;rsquo;ll have to buy me a beer to get those out of me. The main draw though, was being able to work with &lt;a href=&#34;http://Clojure.org/&#34;&gt;Clojure&lt;/a&gt; instead of C# (Hence the punny title).&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a lot of posts about why and how &lt;a href=&#34;https://puppetlabs.com/blog/new-era-application-services-puppet-labs&#34;&gt;companies&lt;/a&gt; &lt;a href=&#34;http://www.pitheringabout.com/?p=693&#34;&gt;moved&lt;/a&gt; &lt;a href=&#34;https://yow.eventer.com/yow-2013-1080/lessons-learned-from-adopting-Clojure-by-jey-fields-1397&#34;&gt;to&lt;/a&gt; &lt;a href=&#34;http://thoughtworks.github.io/p2/issue09/two-months-early/&#34;&gt;Clojure&lt;/a&gt; but not so many about individuals - I guess we don&amp;rsquo;t really make good marketing pieces? (I&amp;rsquo;m going to have to eat my hat on this one: &lt;a href=&#34;http://owenrh.me.uk/blog/2015/08/24/&#34;&gt;Owen Rees-Hayward&lt;/a&gt; totally beat me to the punch.)&lt;/p&gt;

&lt;p&gt;So I&amp;rsquo;m going to tell you a little about why I made the jump to Clojure.&lt;/p&gt;

&lt;!--More--&gt;

&lt;p&gt;One of the main reasons I want to use Clojure is selfish - there are terrific productivity gains &lt;a href=&#34;http://www.paulgraham.com/avg.html&#34;&gt;promised&lt;/a&gt; with any lisp, along with &amp;ldquo;magic mind expanding powers&amp;rdquo;. By that I mean the claim that it&amp;rsquo;ll make you think about solving problems differently. I&amp;rsquo;m not certain how much that&amp;rsquo;s happened yet. I know I do code differently, but it&amp;rsquo;s difficult to separate thought patterns from the languages that they&amp;rsquo;re encoded in.&lt;/p&gt;

&lt;p&gt;But the point is, anything that makes me a better programmer, or at the very least broadens my skill set, is something I want to try. I&amp;rsquo;ve already done that, of course, but there&amp;rsquo;s a big degree of difference between using something for, well, fun basically, and using it in anger. Spending 8 hours a day doing something is probably a pretty good way to get used to wielding it. I already feel just as productive as I was after two years working in C# - I&amp;rsquo;ve got a lot of theories about why that is, but that&amp;rsquo;s something I&amp;rsquo;ll save for a later post.&lt;/p&gt;

&lt;p&gt;So I&amp;rsquo;ve used Clojure in the past, but it&amp;rsquo;s always been dabbling rather than full on commitment - I&amp;rsquo;d mess with something once every couple of months and then drift off again and forget everything just in time to try and pick it all up again. Clojure wasn&amp;rsquo;t the only programming language I had repeated flings with - I&amp;rsquo;ve been bellyaching about my choice of programming language for a while. C# is too verbose, corporate and bland, Go doesn&amp;rsquo;t have enough abstractive power, F# is undersupported (I mean both in the sense of it&amp;rsquo;s corporate master and it&amp;rsquo;s not so super array of libraries), Rust involves too much compiler fighting, ditto Haskell. Yeah. I&amp;rsquo;m fussy. Even Clojure makes compromises, but at least the choices it makes I can understand (and agree with) the reasoning behind.&lt;/p&gt;

&lt;p&gt;Case in point, basing off the JVM. You trade startup time and memory use for a huge ecosystem that&amp;rsquo;s been built up over many, many years, and a stellar virtual machine. (Yes, that&amp;rsquo;s other people&amp;rsquo;s words, I&amp;rsquo;m not enough of an expert on the JVM to trust my own commentary.) To me, that seems like a pretty good deal. That said, I&amp;rsquo;m massively hopeful that Clojurescript will prove viable as a serverside lanuguage under node, since it doesn&amp;rsquo;t have the memory footprint or the startup time of the JVM hosted version of Clojure. (This is probably more related to the agressive optimizations that the Closure compiler does, which incurs a hit at compile time as a result.)&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s another thing that&amp;rsquo;s worth mentioning. Don&amp;rsquo;t read this as me bashing on Javascript, because I&amp;rsquo;d probably pick it as my favourite of any C styled langauge, for a bunch of reasons I won&amp;rsquo;t get into here. It has it&amp;rsquo;s warts (if you haven&amp;rsquo;t seen it yet Gary Bernhardt&amp;rsquo;s &lt;a href=&#34;https://www.destroyallsoftware.com/talks/wat&#34;&gt;&amp;ldquo;Javascript Wat&amp;rdquo; talk&lt;/a&gt; is a great way to witness a few of them in a few minutes.) and when you throw in the general terribleness of a few implementations, it becomes a little unpalatable. Thankfully, there&amp;rsquo;s clojurescript.&lt;/p&gt;

&lt;p&gt;Being able to write your front and back end code in the same language with the same semantics is a godsend. I don&amp;rsquo;t get to do a lot of it at work, but not having to make a language context switch every time something needs to get tweaked on the front end is amazing, and having exactly the same data structures shared between the client and the server is really useful. These a whole bunch of pretty amazing libraries and tooling, like figwheel, devcards, and om.&lt;/p&gt;

&lt;p&gt;So now it&amp;rsquo;s probably worth discussing the elephant in the room. You know, what normally drives people away from lisps. The parens (also known by their proper name, the parenthesis. But that makes my brain kinda go thunk every time I write it.). All of the parens. Yeah, Clojure has that &amp;lsquo;problem&amp;rsquo;. There&amp;rsquo;s ways to mitigate it (the -&amp;gt; and -&amp;gt;&amp;gt; threading macros, or as I like to call them, the spear and pointy spear.) but you&amp;rsquo;ll still see more ()&amp;rsquo;s than in say C# or Java.&lt;/p&gt;

&lt;p&gt;On the other hand, C# and Java have their own sea of brackets problems, it&amp;rsquo;s just that they tend to be curlier than in Clojure. You also get some chunks in your bracket soup in the form of a ton of keywords. The average Clojure namespace (probably the closest equivalent to a class, and they do compile down to a class, but not as you know it.) doesn&amp;rsquo;t have half the amount of stuff that litters your average java/C#/blub class.&lt;/p&gt;

&lt;p&gt;But if you&amp;rsquo;ve been working in a language for any length of time, you&amp;rsquo;ve probably stopped conciously noticing a whole bunch of things - you don&amp;rsquo;t have to actually look for stuff like the class keyword or the indications that something is a method - you only actually see the names and just kind of know about the surrounding fluff.&lt;/p&gt;

&lt;p&gt;The same thing essentially happens in clojure. It&amp;rsquo;s only occasionally that you actually need to go hunting for a stray paren. Rainbow parens and a little bit of bracket match-y highlight-y stuff makes that go away. Or makes the parens you&amp;rsquo;ve got too many of go away. There&amp;rsquo;s other tricks as well - Structual editing (aka paredit) seems promising, but also kinda scary. My first encounter with it reminded me of the first time I used vim - mostly an experience of &amp;ldquo;what the fcsk is going on&amp;rdquo;. That&amp;rsquo;s something I&amp;rsquo;m going to try and fix, however.&lt;/p&gt;

&lt;p&gt;Ok, so that being dealt with, there&amp;rsquo;s one more big draw to clojure (in my opinion, of course. There&amp;rsquo;s lots of other reasons, but I&amp;rsquo;m just trying to hit the high notes here.) and it&amp;rsquo;s not so much about the language itself as the ecosystem around it, the way it was created, and how that affects the Clojure community. First of all, Rich Hickey gives a lot of very good talks, (you should check them out. It&amp;rsquo;ll make your brain think all different and stuff) and uses a lot of interesting vocabulary. I don&amp;rsquo;t think I&amp;rsquo;ve ever heard the term complect uttered by someone who isn&amp;rsquo;t at least a little bit of a functional programming nerd.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s not the fancy choice of words that really matters, but the stuff behind that - the thinking, and the amount of it that gets done. In spite of the REPL, and the opportunity that gives you to really quickly iterate on your code, the &amp;lsquo;best practice&amp;rsquo; for a working clojurist is to think a lot about problems before you tackle them - Hammock Driven Development (as coined by, you guessed it, Rich.)&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s something that shows elsewhere - in my admittedly thus far limited interaction with the wider Clojure community, I&amp;rsquo;ve found people to be a lot more thoughtful and considerate than I&amp;rsquo;ve encountered in other communities. That might just be a side-effect of the relatively small size of the community, but I&amp;rsquo;d like to hope it&amp;rsquo;s something that will persist as more people come into the fold. It&amp;rsquo;s helped make me a lot more comfortable with saying &amp;ldquo;I don&amp;rsquo;t know&amp;rdquo; than I was in the past. That probably has something do to with me knowing the response won&amp;rsquo;t be ridicule. And I think it&amp;rsquo;s something that&amp;rsquo;s rubbed off on me a little, which is great. So much of coding is about how you interact with other people, not just in person but through what you produce. Having a little compassion for the people who are going to be suffering through your code later (even if it is going to be you) can only be a good thing.&lt;/p&gt;

&lt;p&gt;I know the &amp;ldquo;Clojure journey&amp;rdquo; is only really just beginning (doing it for work is completely different to doing it for fun, but I&amp;rsquo;ve already said that), but so far it&amp;rsquo;s all promising. It&amp;rsquo;s different to pretty much any other programming language I&amp;rsquo;ve worked with, which is making it both interesting and challenging.  There&amp;rsquo;s a pragmatic, considered design that infects anything that touches it. In a good way, mind you. It&amp;rsquo;s gotten into the community, who in my dealings and observations (read: lurking!) are all nice in a way that&amp;rsquo;s pretty uncharateristic of the internet. So yeah. I think I&amp;rsquo;ll be happy here, hopefully for quite some time to come.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Error Handling in ASP.NET MVC</title>
          <link>http://lfn3.net/2015/03/08/error-handling-in-asp.net-mvc/</link>
          <pubDate>Sun, 08 Mar 2015 23:06:00 NZDT</pubDate>
          <author>Liam Falconer</author>
          <guid>http://lfn3.net/2015/03/08/error-handling-in-asp.net-mvc/</guid>
          <description>&lt;p&gt;So today we&amp;rsquo;re gonna talk about how to make sure you don&amp;rsquo;t show your users something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://lfn3.net/img/posts/error-handling-in-asp-net-mvc/ysod.png&#34; alt=&#34;The yellow screen of death&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And then making sure that you know that they would have been shown that, and hopefully give you some more infomation to boot. Originally this post was going to be a bit of a monster, but I&amp;rsquo;ve chosen to chop up the hydra a little bit.&lt;/p&gt;

&lt;p&gt;This post just covers how to deal with making IIS catch all the errors that might not get caught inside of your MVC application. I&amp;rsquo;ll dig into the levels closer to MVC in the next post, and then handling error logging in another one after that. They&amp;rsquo;re both already semi-written, so they should follow along soonish. If you aren&amp;rsquo;t really too worried about the reasoning, and trust me enough to just want to get to the money, I&amp;rsquo;ll have a quick summary &amp;ldquo;just do this&amp;rdquo; post up after the long version is finished.&lt;/p&gt;

&lt;p&gt;So. Let&amp;rsquo;s cover the territory of possible ways to show custom error pages to your users, because this being something from Microsoft, there&amp;rsquo;s at least six ways to do a thing, and none of them are exactly what you want. Well, ok. There&amp;rsquo;s only like 4 that I know of:&lt;/p&gt;

&lt;p&gt;You can use an exception handling filter, like the HandleErrorAttribute that&amp;rsquo;s included by default, or you can use a module (basically the same idea as a filter, but further up the chain.), the most promienent example of which would probably be ELMAH. Further torwards the edges of MVC, you can turn to the customErrors thing in your web.config, which as far as I can tell is implemented with a module as well, or finally you can look to the httpErrors option, which lives inside of IIS rather than MVC, but is also in your web.config.&lt;/p&gt;

&lt;p&gt;Basically I&amp;rsquo;m of the opinion you should always pick #4, the IIS option, since it&amp;rsquo;s the highest level of coverage. Anything that goes wrong with all of the other options will end up with whatever is in the &lt;code&gt;httpErrors&lt;/code&gt; tag getting shown.&lt;/p&gt;

&lt;p&gt;You can mix and match any of the other ones along with that to suit your preference, I usually also use the customErrors option, since this is the point most outside of the MVC pipeline but still inside it you can catch exceptions, so it gives you the least exposure to potential issues with your MVC site. At least that&amp;rsquo;s my reasoning, you may come up with a different calculus.&lt;/p&gt;

&lt;p&gt;The reason I don&amp;rsquo;t use filters is because an error inside of your filter config or somewhere inside your global.asax or whatever will cause them to fail completely. The config option does leave you open to issues in your web.config, but if that&amp;rsquo;s hosed you have to rely on your base IIS config. Which hopefully won&amp;rsquo;t show anything ugly to your users. You should probably check that.&lt;/p&gt;

&lt;p&gt;The other issue with filters is they won&amp;rsquo;t fire for what I call the &amp;ldquo;deathmurder exceptions&amp;rdquo; - stuff like stack overflows and out of memory exceptions that just totally kill your application. The stuff you define under that httpErrors tag is, once again, what will save your ass.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s cover that first.&lt;/p&gt;

&lt;p&gt;So in order to deal with this, you have to add another section to your web.config, under the &lt;code&gt;system.webserver&lt;/code&gt; tag:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;httpErrors errorMode=&amp;quot;Custom&amp;quot;&amp;gt;
  &amp;lt;remove statusCode=&amp;quot;404&amp;quot;/&amp;gt;
  &amp;lt;error statusCode=&amp;quot;404&amp;quot; path=&amp;quot;/Views/Errors/404.html&amp;quot; responseMode=&amp;quot;File&amp;quot; /&amp;gt;
  &amp;lt;remove statusCode=&amp;quot;500&amp;quot;/&amp;gt;
  &amp;lt;error statusCode=&amp;quot;500&amp;quot; path=&amp;quot;/Views/Errors/500.html&amp;quot; responseMode=&amp;quot;File&amp;quot; /&amp;gt;
&amp;lt;/httpErrors&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So what&amp;rsquo;s going on here is we&amp;rsquo;re telling IIS to use pretty error pages using the &lt;code&gt;errorMode=&amp;quot;Custom&amp;quot;&lt;/code&gt; attribute. You can set that to &lt;code&gt;DetailedLocalOnly&lt;/code&gt; for general use, but while we&amp;rsquo;re messing with this stuff, we want to make sure you&amp;rsquo;ll actually see the custom error pages, so leave it as &lt;code&gt;Custom&lt;/code&gt; for the moment.&lt;/p&gt;

&lt;p&gt;The rest of it is basically removing the default IIS error pages (otherwise it&amp;rsquo;ll spew at you when you start up the app) and replacing them with our own static HTML files. You can use .aspx files here, but if you get to this point, something has probably gone terribly wrong inside your app, so I would try and avoid relying on any code actually doing anything.&lt;/p&gt;

&lt;p&gt;There are a couple of additonal attributes you might be considering adding, like &lt;code&gt;defaultPath&lt;/code&gt; and &lt;code&gt;defaultResponseMode&lt;/code&gt; however defaultPath seems to cause IIS express to throw it&amp;rsquo;s own exception when running on my machine which would seem to make &lt;code&gt;defaultResponseMode&lt;/code&gt; somewhat pointless. But if you manage to get it working, please let me know &lt;a href=&#34;https://twitter.com/lfln3&#34;&gt;@lfln3&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There is another option if you want to use some custom code, where you can change the &lt;code&gt;responseMode&lt;/code&gt; to &lt;code&gt;ExecuteUrl&lt;/code&gt; and then point the path to an .aspx file. This does mean it will rewrite the response code to a 200, however, which is probably not what you want. To cover that, you can add this snippet to the top of your .aspx file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;%@ Page Language=&amp;quot;C#&amp;quot; %&amp;gt;
&amp;lt;% Response.StatusCode = 404; %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ideally there&amp;rsquo;d be some way of jacking the error status code when getting directed from the custom error definition, but I haven&amp;rsquo;t figured out a way of doing that yet, or if it&amp;rsquo;s even possible. If anyone&amp;rsquo;s got any ideas, once again hit me up at &lt;a href=&#34;https://twitter.com/lfln3&#34;&gt;@lfln3&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d not hugely comfortable personally with having code execute in my error handlers, but if you&amp;rsquo;re ok with it, go nuts. In any case, this should basically iron-clad your app against the possiblity of showing any ugly yellow pages to your users.&lt;/p&gt;

&lt;p&gt;I have created a nuget package to speed this thing up a little, which you can find &lt;a href=&#34;https://www.nuget.org/packages/MVCErrorPages/&#34;&gt;here&lt;/a&gt;, or just run &lt;code&gt;Install-Package MVCErrorPages&lt;/code&gt;. It does include the MVC customErrors stuff, which I&amp;rsquo;m gonna cover in a later installment. But in the meantime, google should be able to help you out. Until then&amp;hellip; good luck, I guess?&lt;/p&gt;
</description>
        </item>
      
    
      
    
      
    
      
        <item>
          <title>Fresh Thoughts on Dependency Injection</title>
          <link>http://lfn3.net/2015/02/15/fresh-thoughts-on-dependency-injection/</link>
          <pubDate>Sun, 15 Feb 2015 12:10:22 NZDT</pubDate>
          <author>Liam Falconer</author>
          <guid>http://lfn3.net/2015/02/15/fresh-thoughts-on-dependency-injection/</guid>
          <description>&lt;p&gt;This is essentially a follow up to an earlier post &lt;a href=&#34;http://lfn3.net/2014/09/18/dependency-injection-a-necessary-evil/&#34;&gt;Dependency Injection - A necessary evil?&lt;/a&gt;,  from back when I had more reservations about using DI, and the benefits it gave me. I&amp;rsquo;ve since been fully converted to a &amp;lsquo;believer&amp;rsquo;. This post is bascially about why and how I think that happened.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m still toiling in the C# mines, but I&amp;rsquo;ve moved from using &lt;a href=&#34;http://www.ninject.org/&#34;&gt;Ninject&lt;/a&gt; to a more&amp;hellip; static library, &lt;a href=&#34;http://autofac.org/&#34;&gt;Autofac&lt;/a&gt;. Ninject suffers from a little bit of &lt;a href=&#34;http://blog.codinghorror.com/new-programming-jargon/&#34;&gt;stringly typing&lt;/a&gt;, while Autofac uses stuff like lambdas and generics to make errors happen at compile time rather than run time, which I&amp;rsquo;m a huge fan of. There&amp;rsquo;s heaps of other neat stuff too, so if you&amp;rsquo;re using C#, it&amp;rsquo;s almost certainly worth checking out if you haven&amp;rsquo;t already used it.&lt;/p&gt;

&lt;p&gt;So the reason I was initally led to DI was due to the need to get tests across a fragile part of a long running project. This was basically a calendar you could making bookings on (the process of making a booking was fairly time consuming - the booking form has something like 30 fields on it or something.), and depending on what options you picked, it would block out more or less time around the date you chose. There were a whole bunch of other rules that could also apply, just to make it more fun.&lt;/p&gt;

&lt;p&gt;In any case, it was painful to manually test, and we ran into some weird bugs around public holidays and that sort of thing that we very luckily caught before they made it into production. It took that to get management to sign off on me adding tests to this area of the code. Since doing that, it&amp;rsquo;s been (unsurprisingly) bug free.&lt;/p&gt;

&lt;p&gt;This experience was enough to sell me on the complexity trade offs of DI. At this point I still haven&amp;rsquo;t fully embraced TDD or anything - I tend to mostly apply tests to areas I&amp;rsquo;m nervous about rather than everything. Not that I would have the time to put them on everything at my day job in any case.&lt;/p&gt;

&lt;p&gt;The other thing that I came to realize was that DI really does enforce cleaner separation between your code - you&amp;rsquo;re constantly asking if this bit of code really belongs in your controllers (and the answer is usually no.) so tons of stuff gets pushed further out, where it&amp;rsquo;s easier to abstract and extract for reuse. Presently I&amp;rsquo;m in the process of using T4 templates to generate a whole bunch of boilerplate I was writing for a lot of projects at work, something I probably never would have realised was an option without using DI.&lt;/p&gt;

&lt;p&gt;Being able to draw clean lines around parts of your system also means that you can reason about them in isolation. Anything that means you don&amp;rsquo;t have to juggle a whole bunch of infomation at once is great, and by splitting everything up for the purposes of injection it becomes much more explict where exactly any bad data is coming from, as long as you let your injected objects maintain responsiblity for their output. That is, output from anything injected should be modified as little as possible - project it into a new form, rather than mutating it&amp;rsquo;s existing one if necessary.&lt;/p&gt;

&lt;p&gt;And since you&amp;rsquo;ve got these independent objects, if you can&amp;rsquo;t pin down what exactly is causing an error, it&amp;rsquo;s a lot easier to write code to help you find out. Put the code into a test harness, through a whole bunch of stuff at it, and make sure your invariants hold. Just make sure you print out the inputs that cause a faliure when an assertion fails.&lt;/p&gt;

&lt;p&gt;The last benefit I got is being able to use my test objects for development. I&amp;rsquo;m not sure if this is something that anyone ever touts, but whenever someone needs to make changes to a database, or some service you&amp;rsquo;re dependent on isn&amp;rsquo;t working, I fall back on the objects I&amp;rsquo;ve written for my tests. They&amp;rsquo;re also great early on in development when you&amp;rsquo;re not yet worried about integrating with actual data or services - you just want to prove the UI/UX works. Obviously you have to eventually switch back to the real thing, but avoiding that block, and hopefully maintaining flow is certainly worth the distance from reality.&lt;/p&gt;

&lt;p&gt;So I guess the main reason I embraced DI was because of the confidence that unit tests gave me - but once I was there, it turns out there&amp;rsquo;s other tangible benefits you get - a better awareness of where and why to decouple your code, an easier debugging experience as a result of that. Once you&amp;rsquo;ve got the test objects for testing, they&amp;rsquo;re also perfect for when something external would otherwise stop you from making forward progress. I&amp;rsquo;m sure I&amp;rsquo;m preaching to the choir here, but if you&amp;rsquo;re working in a mainstream OO language, and you aren&amp;rsquo;t using dependency injection, you&amp;rsquo;re missing out.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Moving to Hugo and Lanyon</title>
          <link>http://lfn3.net/2015/02/14/moving-to-hugo-and-lanyon/</link>
          <pubDate>Sat, 14 Feb 2015 18:52:49 NZDT</pubDate>
          <author>Liam Falconer</author>
          <guid>http://lfn3.net/2015/02/14/moving-to-hugo-and-lanyon/</guid>
          <description>&lt;p&gt;So if you&amp;rsquo;ve been here before (highly unlikely, I know), you might have noticed this place might have previously looked almost entirely different. There&amp;rsquo;s reasons for that. I got somewhat frustrated with my existing cobbled together solution of python scripts, so I had a bit of a look around and found this nice new-ish project (in Go, which is an important factor for me, I like to be able to stare into the guts of the things I use.) called &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;. It seems to support pretty much everything I want it to, which is super. And it&amp;rsquo;s also relatively simple in terms of what it expects from the user, which is also great.&lt;/p&gt;

&lt;p&gt;Even better, a whole bunch of people have already made some pretty themes for it. Like this one, &lt;a href=&#34;https://github.com/tummychow/lanyon-hugo&#34;&gt;Lanyon&lt;/a&gt;. I&amp;rsquo;ve messed with it a little (I&amp;rsquo;m not a huge fan of pagination, amongst other things.), and I still want to add that &lt;a href=&#34;http://www.reddit.com/r/webdev/comments/1a4ss9/i_couldnt_find_a_decent_guide_on_how_to_make_icon/c8u45lf?context=10000&#34;&gt;lightswitch I mentioned&lt;/a&gt; when I first wrote anything here, but hopefully Hugo&amp;rsquo;s ease of use will mean I actually write some stuff in future, rather than despair at the code I&amp;rsquo;d need to write to get my scripts to do a thing and then go do something else instead.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Dependency Injection - A necessary evil?</title>
          <link>http://lfn3.net/2014/09/18/dependency-injection---a-necessary-evil/</link>
          <pubDate>Thu, 18 Sep 2014 07:27:25 NZST</pubDate>
          <author>Liam Falconer</author>
          <guid>http://lfn3.net/2014/09/18/dependency-injection---a-necessary-evil/</guid>
          <description>&lt;p&gt;&lt;em&gt;Basically my position on DI has since changed - go take a look at &lt;a href=&#34;http://lfn3.net/2015/02/14/fresh-thoughts-on-dependency-injection/&#34;&gt;Fresh Thoughts on Dependency Injection&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So first of all, to preface this and so you get a little bit of insight from where I&amp;rsquo;m coming from, I spend most of my days toiling in the great C# mine, so lovingly provided by Microsoft. I used to be a python guy, and I&amp;rsquo;ve gotten dangerous with Go, and am trying to do so with Clojure. The clojure thing is recent, so this might be a bit more cargo culty than I&amp;rsquo;d like. Anyway.&lt;/p&gt;

&lt;p&gt;So the shop where I currently get paid is a little behind the times. Legacy code base
(in the &lt;a href=&#34;http://www.amazon.com/gp/product/0131177052/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0131177052&amp;amp;linkCode=as2&amp;amp;tag=byatlascom-20&amp;amp;linkId=A3OM5UCAGXASTXG3&#34;&gt;Micheal Feathers&lt;/a&gt;
&amp;ldquo;Legacy code is code without tests&amp;rdquo; sense) and an enterprise-y monolithic feel. There&amp;rsquo;s some seemingly arbitrary layering and attempts to divide responsibility, but (to me at least) they seem to all follow their own internal logic rather than any cohesive structure.
&lt;img src=&#34;http://ir-na.amazon-adsystem.com/e/ir?t=byatlascom-20&amp;l=as2&amp;o=1&amp;a=0131177052&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Luckily, I&amp;rsquo;ve managed to largely dodge that particular bullet, and mostly work on stuff external to the mothership.&lt;/p&gt;

&lt;p&gt;One of the things I&amp;rsquo;ve been trying to adopt is unit testing (or just testing in general). It&amp;rsquo;s proven to be far more difficult to implement in ASP.net MVC than I was expecting (hoping?). One of the tools you are essentially required to lean on (which is not entirely a bad thing, admittedly.) is dependency injection (hereafter referred to as DI), which, as the title implies, I view as almost as much of a pain as it is useful.&lt;/p&gt;

&lt;p&gt;It does, very usefully, impose a need to split apart unrelated functionality. There seems to be a very real love of gigantic libaries, sprouting tendrils to handle every possible eventuality, in the C# world. I&amp;rsquo;ve seen my co-workers build them, repeatedly, fuelled by some sort of steriodially inflamed Not Invented Here syndrome. By using DI you stand a far better chance of producing something that&amp;rsquo;s at least slightly reusable.&lt;/p&gt;

&lt;p&gt;I can sympathize with their distrust of DI a little, at least. DHH has recently spoken of &amp;ldquo;test induced design damage&amp;rdquo; and I think it&amp;rsquo;s certainly possible (ok, I know it&amp;rsquo;s possible, I&amp;rsquo;ve done it.) to contort your code into strange and impossible shapes as a result of desire to test everything that&amp;rsquo;s not nailed down.&lt;/p&gt;

&lt;p&gt;The primary thing that spooks me about DI is the explosion of complexity necessary in its usage. Layer upon layer of factories, facades and interfaces (Seriously. So many interfaces.) follow in it&amp;rsquo;s wake, each seemingly necessary, but all clouding the actual purpose of your software in arcane scribblings. And for what? Sure, you might be able to test it, but if it takes you half an hour to trace through the code to figure out that an error found in production was caused by something 6 layers deep, and would have been found by a test that would only fail very intermittently&amp;hellip;&lt;/p&gt;

&lt;p&gt;I guess that you have to believe that the safety net given to you by the tests is worth the time it takes to write them and maintain them and the additional complexity that DI causes. Not to mention the cost of refactoring an existing system (presumably without the benefit of tests to make sure you didn&amp;rsquo;t break anything. Or at least much.) I don&amp;rsquo;t know that I&amp;rsquo;m at that point. Yet.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Fun with Icon Fonts</title>
          <link>http://lfn3.net/2013/03/12/fun-with-icon-fonts/</link>
          <pubDate>Tue, 12 Mar 2013 18:32:40 &#43;1200</pubDate>
          <author>Liam Falconer</author>
          <guid>http://lfn3.net/2013/03/12/fun-with-icon-fonts/</guid>
          <description>

&lt;p&gt;So I spent a good chunk of today messing around with making a few icons for use on this site. Which was&amp;hellip; interesting. There isn&amp;rsquo;t really a heck of a lot of information out there about how to do this, or at least nothing that google turned up. I managed to cobble something together though. And now hopefully reading this will save you all that effort.&lt;/p&gt;

&lt;p&gt;First of all, why would you want to do this anyway? Well personally, I like the fact that I stop serving as many images, save on bandwidth, and get all the css and html text attributes for free. Basically the only drawback as far as I can see is the extra work involved in producing vector art and the messing around with turning it into a font. The only other issue is that your icon &lt;em&gt;has&lt;/em&gt; to be mono coloured. You can&amp;rsquo;t have some multicoloured Bob Ross shit. If you want to do something like that, you&amp;rsquo;ll have to use actual images.&lt;/p&gt;

&lt;p&gt;Got some pretty picture in your head you want to make into reality? Read on.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s two tools I ended up using: &lt;a href=&#34;http://inkscape.org/&#34;&gt;Inkscape&lt;/a&gt; and &lt;a href=&#34;http://fontforge.org/&#34;&gt;FontForge&lt;/a&gt;, both of which are free and cross platform. Inkscape includes some basic tools that allow you to produce a SVG font, however that isn&amp;rsquo;t amazingly useful in order to actually produce something the people looking at your site can see. I then used FontForge to edit the attributes, make sure I didn&amp;rsquo;t completely mangle everything and export all the formats I wanted.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re new to vector imaging tools, InkScape is probably going to be kinda confusing. I might throw together a quick tutorial on it later, however until then, try taking a look &lt;a href=&#34;http://inkscapetutorials.wordpress.com/&#34;&gt;round here&lt;/a&gt;, and &lt;a href=&#34;http://inkscape.org/doc/&#34;&gt;the official docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ok. So you&amp;rsquo;ve opened up Inkscape, and you&amp;rsquo;re looking at a blank page. Probably the wrong page. Hit File -&amp;gt; New -&amp;gt; fontforge_glyph. &lt;img src=&#34;http://lfn3.net/img/posts/fun-with-icon-fonts/new-fontforge-glyph.png&#34; alt=&#34;New Glyph&#34; /&gt; The devs of inkscape are ever so thoughtful, aren&amp;rsquo;t they? This will give you the 1000px by 1000px canvas you need. That line blue about &lt;sup&gt;3&lt;/sup&gt;&amp;frasl;&lt;sub&gt;4&lt;/sub&gt; of the way down the canvas is the baseline, or where most fonts put the bottom of their characters. &lt;img src=&#34;http://lfn3.net/img/posts/fun-with-icon-fonts/blank-canvas.png&#34; alt=&#34;Blank Canvas&#34; /&gt; You&amp;rsquo;ll want to treat that as the bottom of whatever you&amp;rsquo;ve chosen to make.&lt;/p&gt;

&lt;p&gt;At this point you&amp;rsquo;ll probably want to pull open the sidebar, since the &lt;em&gt;Fill and Stroke&lt;/em&gt; pane is really, really useful If you head to Object -&amp;gt; Fill and Stroke, you should get something like this: -&lt;img src=&#34;http://lfn3.net/img/posts/fun-with-icon-fonts/stroke-and-fill-pane.png&#34; alt=&#34;Stroke and Fill Pane&#34; /&gt; Also while we&amp;rsquo;re at it, the &lt;em&gt;SVG Font Editor Pane&lt;/em&gt; will also see some heavy use. That can be found under Text -&amp;gt; SVG Font Editor &lt;img src=&#34;http://lfn3.net/img/posts/fun-with-icon-fonts/svg-font-editor-pane.png&#34; alt=&#34;SVG Font Editor Pane&#34; /&gt;&lt;/p&gt;

&lt;p&gt;So now comes the fun part. Draw something pretty! Keep in mind the colour constraint. Also be aware that you&amp;rsquo;re basically going to flatten the image later, so anything you do with layering will also be ignored. I&amp;rsquo;ve chosen to excercise my artistic talent with this beautiful ball&amp;hellip; thing. &lt;img src=&#34;http://lfn3.net/img/posts/fun-with-icon-fonts/ball-thing.png&#34; alt=&#34;Ball Thing&#34; /&gt; Note that the redness of the outline and the fill will be lost when we turn this into a glyph. You&amp;rsquo;ll see that in a moment.&lt;/p&gt;

&lt;p&gt;The font specific stuff can be found under the &lt;em&gt;Text&lt;/em&gt; menu. You&amp;rsquo;ll want to open up the &lt;em&gt;SVG Font Editor Pane&lt;/em&gt; if you haven&amp;rsquo;t already.&lt;/p&gt;

&lt;p&gt;If you haven&amp;rsquo;t already made one, you&amp;rsquo;ll need to make a new font in the Font Editor pane. You can ignore the name, (we can change it later in fontforge) but not the width. Make sure to set that to 1000. I forgot this time, and it will make fontforge angry at you later. &lt;img src=&#34;http://lfn3.net/img/posts/fun-with-icon-fonts/new-font.png&#34; alt=&#34;New Font&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Head over to Glyphs, and add a new glyph. Name it something informative by double clicking on the name and changing it to whatever. Do the same for the matching string. &lt;img src=&#34;http://lfn3.net/img/posts/fun-with-icon-fonts/glyph-define.png&#34; alt=&#34;Defining a glyph&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Again, this can be altered later in FontForge (and will be in the case of the string). Then select your path in the main window, and hit Get curves from selection. This should set the chosen glyph to use your current path. If you type the matching string into the Sample Text field it should show up just above it. &lt;img src=&#34;http://lfn3.net/img/posts/fun-with-icon-fonts/glyph-got-curves.png&#34; alt=&#34;Getting curves&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Ok. So at this point we can skip out of inkscape and make a font with our one glyph. If you want to do that, skip ahead a bit. There are a few more little things that you should learn with regard to inkscape however: Layers, Squishing and Converting paths.&lt;/p&gt;

&lt;p&gt;If you want to add more glyphs (which you should. One glyph per font will drive you insane with the CSS and be horrifically inefficent.), you&amp;rsquo;ll probably want to use layers to hide the current path. Open up the Layers Pane: &lt;img src=&#34;http://lfn3.net/img/posts/fun-with-icon-fonts/layers-pane.png&#34; alt=&#34;Layers Pane&#34; /&gt; You can just hide and lock the current layer, but you&amp;rsquo;ll probably want to name it something vaguely informative first. Usually I use the same name as in the &lt;em&gt;SVG Font Editor&lt;/em&gt; bit. &lt;img src=&#34;http://lfn3.net/img/posts/fun-with-icon-fonts/layer-hiding.png&#34; alt=&#34;Layer Hiding&#34; /&gt;&lt;/p&gt;

&lt;p&gt;What ever you do, don&amp;rsquo;t delete it. You&amp;rsquo;ll tempt Murphy and his law - if later on you have the wrong glyph selected when you hit &lt;em&gt;Get Curves from Selection&lt;/em&gt;, it&amp;rsquo;ll be overwritten. And no, it doesn&amp;rsquo;t ask for confirmation or anything like that. As far as I know, you can&amp;rsquo;t just use undo on it. Yeah. I made that mistake. Only the once. (Ok, like four times.)&lt;/p&gt;

&lt;p&gt;So anyway, lets go ahead and create a new layer and deal with Path Conversion.&lt;/p&gt;

&lt;p&gt;This time, I&amp;rsquo;ve used the pen tool to make some fancy curve. &lt;img src=&#34;http://lfn3.net/img/posts/fun-with-icon-fonts/fancy-curve.png&#34; alt=&#34;Fancy curve&#34; /&gt; You can adjust the thickness of the stroke and whatever in the &lt;em&gt;Fill and Stroke Pane&lt;/em&gt;. So let&amp;rsquo;s add another glyph to our font in the &lt;em&gt;SVG Font Pane&lt;/em&gt;, and hit the magic button, &lt;em&gt;Get Curves from Selection&lt;/em&gt;&amp;hellip; &lt;img src=&#34;http://lfn3.net/img/posts/fun-with-icon-fonts/mistakes.png&#34; alt=&#34;Mistakes were made&#34; /&gt; and we (ok, I) screwed it up. Not only did I overwrite the beauty of my circle, but also the glyph looks nothing like what I expected it to. Ok.&lt;/p&gt;

&lt;p&gt;Fixing the glyph overwriting is easy thanks to layers, &lt;img src=&#34;http://lfn3.net/img/posts/fun-with-icon-fonts/fixed.png&#34; alt=&#34;Fixed overwritten glyph&#34; /&gt; but now there&amp;rsquo;s still the issue of the malformed glyph over there. First a slight detour to the aforementioned &lt;em&gt;Stroke and Fill Pane&lt;/em&gt; to make my curve more curvy, then this is where the whole path conversion thing comes in. If we just hit Path -&amp;gt; Stroke to Path and then &lt;em&gt;Get Curves from Selection&lt;/em&gt; we should get exactly what we&amp;rsquo;re looking for: &lt;img src=&#34;http://lfn3.net/img/posts/fun-with-icon-fonts/glyph-curve.png&#34; alt=&#34;Fancy, glyphified curve&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The last thing that might be important if you&amp;rsquo;re making something complex (like the globe logo you&amp;rsquo;ve seen plastered all over this website.) is what I crudely termed Squishing paths. I don&amp;rsquo;t have any images for this, but basically you can use the tools under the Path menu (Union, Difference, Intersection etc.) to combine multiple paths into one for conversion into a glyph.&lt;/p&gt;

&lt;p&gt;Combine and Break Apart look tempting, however as far as I know, they only work on objects, and therefore aren&amp;rsquo;t that useful to us &amp;ldquo;font-artists&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;So, now you can go ahead and save a copy of the SVG, and get cracking in fontforge.&lt;/p&gt;

&lt;p&gt;Presuming you managed to open up the SVG in FontForge, you&amp;rsquo;ll be presented with a grid of your glyphs, hopefully. &lt;img src=&#34;http://lfn3.net/img/posts/fun-with-icon-fonts/fontforge-glyph-grid.png&#34; alt=&#34;Fontforge Grid&#34; /&gt; So. Now we have to assign all of the glyphs unicode code points. I recommend using the ones from the &lt;a href=&#34;http://en.wikipedia.org/wiki/Private_Use_(Unicode)&#34;&gt;Private Use Areas&lt;/a&gt;, since they won&amp;rsquo;t get picked up by screen readers or anything, and it seems like the logical place to put whatever weird logo you&amp;rsquo;ve come up with. Since we&amp;rsquo;re defining our own font, you could use whatever value you want, however.&lt;/p&gt;

&lt;p&gt;So, right click on one of your glyphs, then hit &lt;em&gt;Glyph Info&lt;/em&gt;. You&amp;rsquo;ll get a window where you can give the glyph a name (Pick something logical. You&amp;rsquo;ll probably want to keep this consistent if you do the whole CSS @font-face and i tag thing.) and set the unicode value for the character. &lt;img src=&#34;http://lfn3.net/img/posts/fun-with-icon-fonts/fontforge-glyph-info.png&#34; alt=&#34;Glyph Info Window&#34; /&gt; Basically, do that for all your glyphs.&lt;/p&gt;

&lt;p&gt;Once you&amp;rsquo;ve got that sussed, hit Element -&amp;gt; Font Properties. Here you can define all the details for your font. It should all be fairly self explanatory. &lt;img src=&#34;http://lfn3.net/img/posts/fun-with-icon-fonts/fontforge-font-info.png&#34; alt=&#34;Font Properties&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Once that&amp;rsquo;s done, save your font again (preferably in the FontForge format, .sfd) and start exporting in all the different formats you want. I&amp;rsquo;d recommend at least doing ttf and woff. You&amp;rsquo;ll probably want to get it into eot, which font-forge unfortunately can&amp;rsquo;t natively produce (It&amp;rsquo;s a format created by Microsoft for IE, so go figure.). &lt;a href=&#34;http://onlinefontconverter.com/&#34;&gt;This&lt;/a&gt; website should allow you to convert it to .eot, along with a bunch of other random formats if you feel like that kind of thing.&lt;/p&gt;

&lt;p&gt;You might run into some errors during export. Most of these can be fixed with the tools in fontforge, right clicking on the appropriate glyphs should give you options to convert to integer variables, correct direction and AutoHint. You can find the option to fix the extrema error in Element -&amp;gt; Add Extrema.&lt;/p&gt;

&lt;p&gt;So now that that&amp;rsquo;s done, we need to make some CSS. Here&amp;rsquo;s what I&amp;rsquo;ve used, it&amp;rsquo;s basically taken directly from &lt;a href=&#34;http://fortawesome.github.com/Font-Awesome/&#34;&gt;FontAwesome&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@font-face {
  font-family: &#39;byatlas-iconfont&#39;;
  src: url(&#39;/assets/font/byatlas-iconfont.eot&#39;);
  src: url(&#39;/assets/font/byatlas-iconfont.eot&#39;) format(&#39;embedded-opentype&#39;),
    url(&#39;/assets/font/byatlas-iconfont.woff&#39;) format(&#39;woff&#39;),
    url(&#39;/assets/font/byatlas-iconfont.ttf&#39;) format(&#39;truetype&#39;);
  font-weight: normal;
  font-style: normal;
}
[class^=&amp;quot;icon-&amp;quot;],
[class*=&amp;quot; icon-&amp;quot;] {
  font-family: byatlas-iconfont;
  font-weight: normal;
  font-style: normal;
  text-decoration: inherit;
  -webkit-font-smoothing: antialiased;

  /* sprites.less reset */
  display: inline;
  width: auto;
  height: auto;
  line-height: normal;
  vertical-align: baseline;
  background-image: none;
  background-position: 0% 0%;
  background-repeat: repeat;
  margin-top: 0;
}
.icon-globe:before    { content: &amp;quot;\f0000&amp;quot;;}
.icon-half-globe:before    { content: &amp;quot;\f0001&amp;quot;;}
.icon-twitter:before        { content: &amp;quot;\f0002&amp;quot;; }
.icon-github:before     { content: &amp;quot;\f0003&amp;quot;; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hopefully all the parameters there are, again, self explanatory. The bits right down the bottom are used to produce the i tags that everyone loves so much. If you don&amp;rsquo;t want to do that, just so long as you enclose your text with tags that have the correct font-family set, you can use this type of thing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;#983040;
&amp;amp;#983041;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And so on. Those are just the hex values converted to decimal, prefixed with &amp;amp;# and ending with ;. Much like how you use &amp;amp;nsbp and the like.&lt;/p&gt;

&lt;p&gt;So hopefully you&amp;rsquo;ve made your shiny new startup or whatever even shinier now with svelte, lightweight icon fonts. You are going to cut me in on a slice of the profits, right?&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t make another wingdings,&lt;/p&gt;

&lt;h2 id=&#34;atlas&#34;&gt;ATLAS&lt;/h2&gt;
</description>
        </item>
      
    
      
        <item>
          <title>The Making of</title>
          <link>http://lfn3.net/2013/03/11/the-making-of/</link>
          <pubDate>Mon, 11 Mar 2013 18:32:40 &#43;1200</pubDate>
          <author>Liam Falconer</author>
          <guid>http://lfn3.net/2013/03/11/the-making-of/</guid>
          <description>&lt;p&gt;&lt;em&gt;This post is hideously out of date. Go take a look at &lt;a href=&#34;http://lfn3.net/2015/02/14/moving-to-hugo-and-lanyon/&#34;&gt;Moving to Hugo and Lanyon&lt;/a&gt; for the lowdown on way this site works now&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So. I&amp;rsquo;d written two posts in anticipation of getting this up and running, however they proved to be glouriously incorrect. I&amp;rsquo;ve been through about three or four changes in terms of how I actually decided to do this, so&amp;hellip; yeah.&lt;/p&gt;

&lt;p&gt;Anyway, at this point, it&amp;rsquo;s a site that&amp;rsquo;s built from &lt;a href=&#34;http://jinja.pocoo.org/&#34;&gt;Jinja2&lt;/a&gt; templates. Mostly. In case you haven&amp;rsquo;t noticed, some bits of it are still not yet entirely working. Mostly the contact page. And all the examples I need to throw on the page that&amp;rsquo;s supposed to convince you to pay me. Which is just a little bit awkward.&lt;/p&gt;

&lt;p&gt;So initally I just planned to generate the blog using &lt;a href=&#34;http://blog.getpelican.com/&#34;&gt;Pelican&lt;/a&gt;, but that seemed like a bit of overkill for what I wanted to do. Plus you know, I can&amp;rsquo;t call myself a real hacker if I don&amp;rsquo;t DIY this bad boy.
So although it works at the moment, it&amp;rsquo;ll probably be something I polish for quite some time to come.&lt;/p&gt;

&lt;p&gt;But at least so far the site is still almost entirely static. I&amp;rsquo;ll have to do something server side for the contact page, since I don&amp;rsquo;t really want to get spammed into the ground, but apart from that&amp;hellip; it should be all slick and fast and stuff. Even more so once I eventually get around to doing some Ajax stuff.&lt;/p&gt;

&lt;p&gt;Oh, so to summarize the two posts I&amp;rsquo;d originally written, my thanks to &lt;a href=&#34;http://danneu.com/bag/darkstrap/darkstrap.html&#34;&gt;danneu&lt;/a&gt; for &lt;a href=&#34;http://danneu.com/bag/darkstrap/darkstrap.html&#34;&gt;darkstrap&lt;/a&gt;, from which I stole quite a bit of css. And to the &lt;a href=&#34;http://twitter.github.com/bootstrap/&#34;&gt;twitter bootstrap&lt;/a&gt; guys, &lt;a href=&#34;http://markdotto.com/&#34;&gt;Mark Otto&lt;/a&gt; and &lt;a href=&#34;http://byfat.xxx/&#34;&gt;fat&lt;/a&gt; for more css, and making darkstrap possible in the first place.&lt;/p&gt;

&lt;p&gt;I also owe &lt;a href=&#34;http://fortawesome.github.com/Font-Awesome/&#34;&gt;fontawesome&lt;/a&gt; and &lt;a href=&#34;http://subtlepatterns.com/&#34;&gt;subtle patterns&lt;/a&gt; for art cribbed from them. Chchur.&lt;/p&gt;

&lt;p&gt;Oh, and &lt;a href=&#34;http://mrdoob.com/&#34;&gt;Mr. doob&lt;/a&gt; for &lt;a href=&#34;http://mrdoob.github.com/three.js/&#34;&gt;Three.js&lt;/a&gt;, even though I haven&amp;rsquo;t quite got it doing what I want it to yet. I&amp;rsquo;m planning on making this place at least 200% more shiny&amp;hellip; soon&amp;hellip;&lt;/p&gt;

&lt;p&gt;Well, congratulations on surviving my aimless rambling for this long.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This reads way too much like one those tracks giving shoutouts&lt;/em&gt;&lt;/p&gt;
</description>
        </item>
      
    

  </channel>
</rss>
